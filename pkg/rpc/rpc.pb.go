// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Version
	Message
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	SemVer    string `protobuf:"bytes,1,opt,name=sem_ver,json=semVer" json:"sem_ver,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit" json:"git_commit,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetSemVer() string {
	if m != nil {
		return m.SemVer
	}
	return ""
}

func (m *Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

type Message struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Version)(nil), "rpc.Version")
	proto.RegisterType((*Message)(nil), "rpc.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KTK service

type KTKClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error)
	ServerStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (KTK_ServerStreamClient, error)
}

type kTKClient struct {
	cc *grpc.ClientConn
}

func NewKTKClient(cc *grpc.ClientConn) KTKClient {
	return &kTKClient{cc}
}

func (c *kTKClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/rpc.KTK/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kTKClient) ServerStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (KTK_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KTK_serviceDesc.Streams[0], c.cc, "/rpc.KTK/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kTKServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KTK_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type kTKServerStreamClient struct {
	grpc.ClientStream
}

func (x *kTKServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KTK service

type KTKServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*Version, error)
	ServerStream(*google_protobuf.Empty, KTK_ServerStreamServer) error
}

func RegisterKTKServer(s *grpc.Server, srv KTKServer) {
	s.RegisterService(&_KTK_serviceDesc, srv)
}

func _KTK_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KTKServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.KTK/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KTKServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KTK_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KTKServer).ServerStream(m, &kTKServerStreamServer{stream})
}

type KTK_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type kTKServerStreamServer struct {
	grpc.ServerStream
}

func (x *kTKServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _KTK_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.KTK",
	HandlerType: (*KTKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _KTK_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _KTK_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54,
	0x48, 0xc9, 0x40, 0x25, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32,
	0xf3, 0xf3, 0x8a, 0x21, 0xb2, 0x4a, 0x8e, 0x5c, 0xec, 0x61, 0xa9, 0x45, 0xc5, 0x99, 0xf9, 0x79,
	0x42, 0xe2, 0x5c, 0xec, 0xc5, 0xa9, 0xb9, 0xf1, 0x65, 0xa9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x6c, 0xc5, 0xa9, 0xb9, 0x61, 0xa9, 0x45, 0x42, 0xb2, 0x5c, 0x5c, 0xe9, 0x99, 0x25,
	0xf1, 0xc9, 0xf9, 0xb9, 0xb9, 0x99, 0x25, 0x12, 0x4c, 0x60, 0x39, 0xce, 0xf4, 0xcc, 0x12, 0x67,
	0xb0, 0x80, 0x92, 0x32, 0x17, 0xbb, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x90, 0x04, 0x17,
	0x7b, 0x2e, 0x84, 0x09, 0x35, 0x02, 0xc6, 0x35, 0x6a, 0x65, 0xe4, 0x62, 0xf6, 0x0e, 0xf1, 0x16,
	0x72, 0xe1, 0xe2, 0x72, 0x4f, 0x2d, 0x81, 0x59, 0x29, 0xa6, 0x07, 0x71, 0x9c, 0x1e, 0xcc, 0xe5,
	0x7a, 0xae, 0x20, 0x97, 0x4b, 0xf1, 0xe8, 0x81, 0x7c, 0x08, 0x55, 0xa5, 0x24, 0xd0, 0x74, 0xf9,
	0xc9, 0x64, 0x26, 0x2e, 0x21, 0x0e, 0xfd, 0x32, 0xa8, 0x3e, 0x0b, 0x2e, 0x9e, 0xe0, 0xd4, 0xa2,
	0xb2, 0xd4, 0xa2, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x02, 0xe6, 0x40, 0x5d, 0xa7, 0xc4, 0x60,
	0xc0, 0x98, 0xc4, 0x06, 0x56, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x31, 0xd1, 0x5d,
	0x43, 0x01, 0x00, 0x00,
}
