// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Version
	CloudConfig
	CloudInitStream
	Empty
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	SemVer    string `protobuf:"bytes,1,opt,name=sem_ver,json=semVer" json:"sem_ver,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit" json:"git_commit,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetSemVer() string {
	if m != nil {
		return m.SemVer
	}
	return ""
}

func (m *Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

type CloudConfig struct {
	ContainerImage string `protobuf:"bytes,1,opt,name=container_image,json=containerImage" json:"container_image,omitempty"`
	CloudName      string `protobuf:"bytes,2,opt,name=cloud_name,json=cloudName" json:"cloud_name,omitempty"`
}

func (m *CloudConfig) Reset()                    { *m = CloudConfig{} }
func (m *CloudConfig) String() string            { return proto.CompactTextString(m) }
func (*CloudConfig) ProtoMessage()               {}
func (*CloudConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CloudConfig) GetContainerImage() string {
	if m != nil {
		return m.ContainerImage
	}
	return ""
}

func (m *CloudConfig) GetCloudName() string {
	if m != nil {
		return m.CloudName
	}
	return ""
}

type CloudInitStream struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CloudInitStream) Reset()                    { *m = CloudInitStream{} }
func (m *CloudInitStream) String() string            { return proto.CompactTextString(m) }
func (*CloudInitStream) ProtoMessage()               {}
func (*CloudInitStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CloudInitStream) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// TODO - remove this message type and use google.protobuf.Empty
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Version)(nil), "rpc.Version")
	proto.RegisterType((*CloudConfig)(nil), "rpc.CloudConfig")
	proto.RegisterType((*CloudInitStream)(nil), "rpc.CloudInitStream")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Joker service

type JokerClient interface {
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	InitializeCloud(ctx context.Context, in *CloudConfig, opts ...grpc.CallOption) (Joker_InitializeCloudClient, error)
}

type jokerClient struct {
	cc *grpc.ClientConn
}

func NewJokerClient(cc *grpc.ClientConn) JokerClient {
	return &jokerClient{cc}
}

func (c *jokerClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/rpc.Joker/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokerClient) InitializeCloud(ctx context.Context, in *CloudConfig, opts ...grpc.CallOption) (Joker_InitializeCloudClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Joker_serviceDesc.Streams[0], c.cc, "/rpc.Joker/InitializeCloud", opts...)
	if err != nil {
		return nil, err
	}
	x := &jokerInitializeCloudClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Joker_InitializeCloudClient interface {
	Recv() (*CloudInitStream, error)
	grpc.ClientStream
}

type jokerInitializeCloudClient struct {
	grpc.ClientStream
}

func (x *jokerInitializeCloudClient) Recv() (*CloudInitStream, error) {
	m := new(CloudInitStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Joker service

type JokerServer interface {
	GetVersion(context.Context, *Empty) (*Version, error)
	InitializeCloud(*CloudConfig, Joker_InitializeCloudServer) error
}

func RegisterJokerServer(s *grpc.Server, srv JokerServer) {
	s.RegisterService(&_Joker_serviceDesc, srv)
}

func _Joker_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Joker/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Joker_InitializeCloud_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JokerServer).InitializeCloud(m, &jokerInitializeCloudServer{stream})
}

type Joker_InitializeCloudServer interface {
	Send(*CloudInitStream) error
	grpc.ServerStream
}

type jokerInitializeCloudServer struct {
	grpc.ServerStream
}

func (x *jokerInitializeCloudServer) Send(m *CloudInitStream) error {
	return x.ServerStream.SendMsg(m)
}

var _Joker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Joker",
	HandlerType: (*JokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Joker_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitializeCloud",
			Handler:       _Joker_InitializeCloud_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x46, 0xbb, 0x4a, 0xbb, 0xec, 0x28, 0xae, 0x04, 0xc1, 0xa5, 0x20, 0x48, 0x2e, 0x16, 0x84,
	0x22, 0x7a, 0xf6, 0x20, 0x8b, 0x48, 0x3d, 0x78, 0x50, 0xec, 0x75, 0x89, 0x71, 0x5c, 0x06, 0x3b,
	0x49, 0x48, 0xa2, 0xa0, 0xbf, 0x5e, 0x12, 0xba, 0x6e, 0x6f, 0xc9, 0x9b, 0xc9, 0x9b, 0x7c, 0x03,
	0x95, 0x77, 0x7a, 0xe9, 0xbc, 0x8d, 0x56, 0xec, 0x7b, 0xa7, 0xe5, 0x1d, 0x94, 0x6b, 0xf4, 0x81,
	0xac, 0x11, 0xa7, 0x50, 0x06, 0xe4, 0xee, 0x1b, 0x7d, 0x53, 0x9c, 0x17, 0x8b, 0xea, 0x79, 0x16,
	0x90, 0xd7, 0xe8, 0xc5, 0x19, 0x40, 0x4f, 0xb1, 0xd3, 0x96, 0x99, 0x62, 0xb3, 0x97, 0x6b, 0x55,
	0x4f, 0xb1, 0xcd, 0x40, 0xbe, 0xc2, 0x41, 0xbb, 0xb1, 0x5f, 0xef, 0xad, 0x35, 0x1f, 0xd4, 0x8b,
	0x0b, 0xa8, 0xb5, 0x35, 0x51, 0x91, 0x41, 0xdf, 0x11, 0xab, 0x1e, 0xb7, 0xba, 0xa3, 0x7f, 0xbc,
	0x4a, 0x34, 0x69, 0x75, 0x7a, 0xd7, 0x19, 0xc5, 0x38, 0x68, 0x33, 0x79, 0x52, 0x8c, 0xf2, 0x12,
	0xea, 0xac, 0x5d, 0x19, 0x8a, 0x2f, 0xd1, 0xa3, 0x62, 0xd1, 0x40, 0xc9, 0x18, 0xc2, 0xa8, 0x1c,
	0xae, 0xb2, 0x84, 0xe9, 0x3d, 0xbb, 0xf8, 0x73, 0xed, 0x60, 0xfa, 0x68, 0x3f, 0xd1, 0x8b, 0x05,
	0xc0, 0x03, 0xc6, 0x21, 0x1b, 0x2c, 0x53, 0xee, 0xdc, 0x32, 0x3f, 0xcc, 0xe7, 0x6d, 0x45, 0x4e,
	0xc4, 0x2d, 0xd4, 0x69, 0x06, 0xa9, 0x0d, 0xfd, 0x62, 0x1e, 0x29, 0x8e, 0x73, 0xcb, 0x4e, 0xaa,
	0xf9, 0xc9, 0x48, 0xc6, 0x0f, 0xc9, 0xc9, 0x55, 0xf1, 0x36, 0xcb, 0xdb, 0xbc, 0xf9, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xef, 0x62, 0x81, 0x93, 0x5a, 0x01, 0x00, 0x00,
}
